package com.team1.workforest.project.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.rmi.CORBA.PortableRemoteObjectDelegate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.team1.workforest.employee.vo.EmployeeVO;
import com.team1.workforest.project.service.ProjectService;
import com.team1.workforest.project.util.ArticlePageForProject;
import com.team1.workforest.project.vo.ProjectDutyVO;

import com.team1.workforest.project.vo.ProjectVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/project")
public class ProjectController {
	
	@Autowired
	ProjectService projectService;

	// 프로젝트 메인 페이지
	
	  @GetMapping("/main")
	  public String projectMain(){ 
		  return "project/main"; 
	  }
	
	
	// 프로젝트 리스트 출력 	
	@GetMapping("/projects")
	public String getProjectList(Model model,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage) {
		Map<String, Object> map = new HashMap<String, Object>();
		log.info("리스트출력"+currentPage);
		map.put("currentPage", currentPage);
		map.put("empNo", "2023001");
		// 전체 행의 수 (total)
		//int total = this.projectService.getTotal();
		// 한 화면에 보여지는 행의 수
		int size = 5;
		String url= "/project/projects";
		List<ProjectVO> plist = this.projectService.getProjectList(map);
		log.info("리스트출력 plist 넘어왔음: "+plist.get(0).getTotal());
		int total =plist.get(0).getTotal();
		model.addAttribute("data", new ArticlePageForProject<ProjectVO>(total, currentPage, size, plist,"", url));
			
		return "project/main";
	}
	
	//프로젝트 생성 
	@ResponseBody
	@PostMapping("/project")
	public int createProject(@RequestBody ProjectVO vo) {
		log.info("createProject"+vo);
		int res= this.projectService.createProject(vo);
		return res;
	}
	

	//프로젝트 상세 
	@GetMapping("project/{prjctNo}")
	public String getProjectDetail(@PathVariable String prjctNo) {	
		return "project/detail";
	}
	
	//프로젝트 상세페이지에서 일감 출력 
	@ResponseBody
	@PostMapping("/getProjectDuty")
	public List<ProjectDutyVO> getProjectDuty(@RequestBody ProjectDutyVO vo){
		log.info("getProjectDuty : "+vo);		
		List<ProjectDutyVO> list= this.projectService.getProjectDuty(vo);
		log.info("getProjectDuty : "+list);		
		
		return list;
	}
	
	
	//프로젝트 상세페이지의 진행도 계산함수
	@ResponseBody
	@PostMapping("/getProgress")
	public int getProgress(@RequestBody ProjectDutyVO vo) {
		log.info("getprogress : ",vo);
		return this.projectService.getProgress(vo);
	}
	
	//프로젝트 상세페이지의 진행도 업데이트 함수
	@ResponseBody
	@PostMapping("/updateProgress")
	public int updateProgress(@RequestBody ProjectDutyVO vo) {
		log.info("updateprogress : ",vo);
		return this.projectService.updateProgress(vo);
	}
	
	//프로젝트 하위 일감을 생성하는 함수
	@ResponseBody
	@PostMapping("/addDuty")
	public int addDuty(@RequestBody ProjectDutyVO vo) {
		log.info("addDuty: ",vo);
		return this.projectService.addDuty(vo);		
	}
	
	//프로젝트 하위 일감을 삭제하는 함수
	@ResponseBody
	@PostMapping("/deleteDuties")
	public int deleteDuties(@RequestBody ProjectDutyVO vo) {
		log.info("addDuty: ",vo);
		return this.projectService.deleteDuties(vo);		
	}
	
	
	//프로젝트 하위 일감의 상세를 출력하는 함수
	@ResponseBody
	@PostMapping("/getDutyModal")
	public ProjectDutyVO getDutyModal(@RequestBody ProjectDutyVO vo) {
		log.info("getDutyModal 받기전"+vo);
				
		vo= this.projectService.getDutyModal(vo);
		log.info("getDutyModal db받아온거"+vo);
		String empNm= this.projectService.getEmpNmByEmpNo(vo.getEmpNo());
		vo.setEmpNm(empNm);
		return vo;
	}
	
	//empNo로 empNm출력하는 함수
	@ResponseBody
	@PostMapping("/getNameByEmpNo")
	public ProjectDutyVO getNameByEmpNo(@RequestBody ProjectDutyVO vo) {
		log.info("getNameByEmpNo 받기전"+vo);
		
		vo= this.projectService.getNameByEmpNo(vo);
		log.info("getNameByEmpNo db받아온거"+vo);
		return vo;
	}
	
	//이름을 자동완성하는 함수
	@ResponseBody
	@PostMapping("/findEmpByName")
	public List<EmployeeVO> findEmpByName(@RequestBody ProjectDutyVO vo){
		List<EmployeeVO> list =this.projectService.findEmpByName(vo);
		log.info("findEmpByName =>"+list);
   
        return list;
		
	}
	
	//모달창 내에서 수정 확정버튼을 눌렀을때 나오는 함수	
	@ResponseBody
	@PostMapping("/updateDuty")
	public int updateDuty(@RequestBody ProjectDutyVO vo) {
		int result =this.projectService.updateDuty(vo);
		log.info("findEmpByName =>"+result);
		return result;
	}
	
	
	//간트 차트 테스트
	@GetMapping("/gantt/{prjctNo}")
	public String ganttTest(@PathVariable String prjctNo , Model model) {
		model.addAttribute("prjctNo",prjctNo);
		return "project/ganttTest";
	}
	//간트 차트 테스트2
	@GetMapping("/gantt2")
	public String ganttTest2() {
		return "project/ganttTest2";
	}

	//간트용으로 데이터 가져오기
	@ResponseBody
	@PostMapping("/getDutyModalForGantt")
	public List<ProjectDutyVO> getDutyModalForGantt(@RequestBody ProjectDutyVO vo){
		
		List<ProjectDutyVO> ganttVO= this.projectService.getDutyModalForGantt(vo);

		log.info("" + ganttVO);
		for (int i = 0; i < ganttVO.size(); i++) {
			String startDate=ganttVO.get(i).getStartDate();
			String endDate=ganttVO.get(i).getEndDate();
				LocalDate localDate = LocalDate.parse(startDate, DateTimeFormatter.BASIC_ISO_DATE);
				DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				String formattedDate = localDate.format(outputFormatter);
			
				LocalDate localDate2 = LocalDate.parse(endDate, DateTimeFormatter.BASIC_ISO_DATE);
				DateTimeFormatter outputFormatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				String formattedDate2 = localDate2.format(outputFormatter2);
				ganttVO.get(i).setStartDate(formattedDate);
				ganttVO.get(i).setEndDate(formattedDate2);
		}
		log.info("" + ganttVO);

		return ganttVO;
	}
	
	//tree 연습용
	@GetMapping("/tree")
	public String treeTest() {
		return "project/tree";
	}
	
	
}
