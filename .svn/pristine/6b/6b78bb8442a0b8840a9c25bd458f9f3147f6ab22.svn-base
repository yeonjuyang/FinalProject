let _signPad;
$(function () {

	// 문서별 갯수
	getTotalCnt();

	// 결재완료 목록
	getCompletedOfMine();

	// 결재 대기
	getPending();

	// 결재 진행 현황
	getAllProgress();

	// 전자서명
	initSignPad();

});

// 상세 이동
$(document).on('click', '.apvInfo', (e) => {
	let apvNo = e.currentTarget.dataset.id;

	$.ajax({
		url: `${_ctx}/approval/approvalDetailView?apvNo=` + apvNo,
		type: 'get',
		dataType: 'text',
		success: () => {
			location.href = `${_ctx}/approval/approvalDetailView?apvNo=` + apvNo;
		}
	});

});

// 검토자 결재 현황 tooltip
$(document).on('mouseenter', '.level2', (e) => {
	$(e.currentTarget).find('.middle-tooltip').addClass('active');
}).on('mouseleave', '.level2', (e) => {
	$(e.currentTarget).find('.middle-tooltip').removeClass('active');
});


// 날짜 변환
function dateConverter(date) {
	return date.substring(0, 10);
}

// 문서별 갯수 조회
function getTotalCnt() {
	$.ajax({
		url: `${_ctx}/approval/mainView/totalCnt`,
		type: "GET",
		dataType: "json",
		success: (data) => {
			$('#pendingCnt').countNumber(0, data.pendingCnt);
			$('#progressCnt').countNumber(0, data.progressCnt);
			$('#completedCnt').countNumber(0, data.completedCnt);
			$('#refusedCnt').countNumber(0, data.refusedCnt);
		}
	});
}

// 대기 목록 조회
function getPending() {
	$.ajax({
		url: `${_ctx}/approval/mainView/pending`,
		type: 'get',
		dataType: 'json',
		success: (data) => {

			data.forEach((e) => {
				let HTML = `
		            <li>
		                <a href="${_ctx}/approval/approvalDetailView?apvNo=${e.apvNo}">
		                    <div class="img-wrap">
								<img src="${_ctx}/resources/img/icon/avatar.png">
							</div>
							<div class="emp-wrap">
								<div class="tit">${e.apvSj}</div>
								<div class="sub">
									<div class="empInfo">${e.empNm} ${e.apvPosition} ${e.deptNm}</div>
									<div class="date">${e.drftDate.split(' ')[0]}</div>
								</div>
							</div>
		                </a>
		            </li>
		        `;
				$('#pending .form-list').append(HTML);
			});
		}
	});
}

// 결재 완료 목록 조회
function getCompletedOfMine() {
	$.ajax({
		url: `${_ctx}/approval/mainView/completed`,
		type: "GET",
		dataType: "json",
		success: function (data) {
			console.log('결재 완료 목록 -> ', data);

			data.forEach((e) => {
				let HTML = `
		            <li>
		                <a href="${_ctx}/approval/approvalDetailView?apvNo=${e.apvNo}">
		                    <i class="xi-document"></i>
		                    <div class="tit">${e.apvSj}</div>
		                    <div class="date">${e.drftDate.split(' ')[0]}</div>
		                </a>
		            </li>
		        `;
				$('#completed .form-list').append(HTML);
			});
		}
	});
}

// 결재 진행 현황
function getAllProgress() {
	$.ajax({
		url: `${_ctx}/approval/mainView/allProgress`,
		type: "GET",
		dataType: "json",
		success: function (data) {

			console.log('넘어온data', data);

			data = Object.values(data.reduce((acc, e) => {
				if (acc[e.apvNo] == undefined) {
					acc[e.apvNo] = {
						apvNo: e.apvNo,
						apvSj: e.apvSj,
						docFormNm: _HTML.msg.docNm[e.docFormNo],
						drftDate: e.drftDate.split(' ')[0],
						apvLine: [],
					};
				}
				acc[e.apvNo].apvLine.push({
					empNm: e.empNm,
					apvPosition: e.apvPosition,
					apvRspnsbl: e.apvRspnsbl,
					deptNm: e.deptNm,
					apvSttusCd: e.apvSttusCd,
					apvSeCd: e.apvSeCd,
					proflImageUrl: e.proflImageUrl
				});
				return acc;
			}, {}));


			data.forEach((e, i, arr) => {
				$('.process-cont').append(_HTML.main.progress_ul(e));
			});

		}
	});
}


function initSignPad() {
	// 서명 패드 
	_signPad = new SignPad({ canvas: $('canvas#SIGN_PAD_CANVAS')[0] }).setLineWidth(10);

	// 서명 버튼, 이미지 클릭
	$('#SIGN_BTN, img#SIGN_IMG').on('click', (e) => {
		$('#sign_modal').addClass('open');
		$('html').addClass('scroll-hidden');
		_signPad.eraseAll();
	});

	$('#sign_modal #RESET').click((e) => {
		_signPad.eraseAll();
	});
	$('#sign_modal #UPLOAD').click((e) => {
		$('#sign_modal input#FILE').click();
	});

	$('#sign_modal #DOWNLOAD').click((e) => {
		_signPad.download('sign', 'png');
	});

	$('input#FILE').change((e) => {
		let target = e.currentTarget,
			file = target.files[0],
			name = file.name,
			extension = name.substring(name.lastIndexOf('.')),
			whitelist = $(target).attr('accept') ? $(target).attr('accept').split(',').map((e) => e.trim()) : [];

		// 허용 확장자 아닐 경우
		if (!whitelist.includes(extension)) {
			alert(whitelist.join(',') + ' 확장자만 가능합니다.');
		}
		// 허용 확장자 일 경우
		else {
			if (_signPad) {
				_signPad.setImageFile(e.currentTarget.files[0]);
				$('span.sign-pad-txt').css('display', 'none');
			}
		}
	});

	$('#CANCEL_BTN').click((e) => {
		$('#SIGNPAD_CLOSE').trigger('click');
	});

	$('#SAVE_BTN').click((e) => {
		let isEmpty = _signPad.isEmpty();
		if (!isEmpty) {
			// 이미지 그리기, 보여주기
			$('img#SIGN_IMG').prop('src', _signPad.getDataURL('png')).show();
			// 버튼 숨기기
			$('button#SIGN_BTN').hide();
			// 파일 객체로 변환
			let signFile = _signPad.getFile(`sign_${new Date().getTime()}`);
			// input에 file 추가  
			let df = new DataTransfer();
			df.items.add(signFile);
			$('input#SIGN_FILE')[0].files = df.files;
			$('#SIGNPAD_CLOSE').trigger('click');

			//var data = new FormData($("#uploadForm")[0]);

			/* var data = new FormData().append('upload', $('input#SIGN_FILE')[0].files[0])
			$.ajaxSettings.traditional = true;
			$.ajax({
			  url : '/chat/fileUpload',
			  enctype:'multipart/form-data',
			  data : data,
			  dataType: 'text',
			  type: 'POST',
			  processData: false,	
			  contentType: false, 
			  cache: false,		
			  error: function(req, status, err){
				console.log(req, status, err);
			  },
			  success : function(data){
				console.log(data);
			  }
			}); */

		} else {
			alert('서명하지 않았습니다.');
		}
	});
}





