package com.team1.workforest.board.notice.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.team1.workforest.board.notice.service.NoticeService;
import com.team1.workforest.board.notice.vo.NoticeBoardVO;
import com.team1.workforest.board.suggestion.vo.SuggestionVO;
import com.team1.workforest.util.ArticlePageSearchOption;
import com.team1.workforest.util.ArticlePagebrdCd;
import com.team1.workforest.vo.AttachedFileVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/notice")
public class NoticeController {
	
	
	@Autowired
	NoticeService noticeService;
	
	
	// 공지사항 리스트 페이지(메인)
	@GetMapping("/list")
	public String getFreeBrdList (Model model,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "searchOption", required = false, defaultValue = "") String searchOption,
			@RequestParam(value ="brdCd", required = false,defaultValue="") String brdCd ) {
		
		Map<String, Object> map = new HashMap<String,Object>();
		
		// 페이지 번호
		map.put("currentPage", currentPage);
		map.put("keyword", keyword);
		map.put("searchOption", searchOption);
		map.put("brdCd", brdCd);
		
		log.info("getSuggestList->map : " + map);

		// 전체 행의 수 (total) 또는
		// 검색한 키워드의 행 수
		int total = this.noticeService.getkeywordTotal(map);
		log.info("getkeywordTotal -> "+total);
		
		// 한 화면에 보여지는 행의 수 (기본 10행)
		int size = 10;

		List<NoticeBoardVO> NoticeBoardVOList = this.noticeService.list(map);
		
		log.info("list -> NoticeBoardVOList : " + NoticeBoardVOList);

		ArticlePagebrdCd<NoticeBoardVO> data = new ArticlePagebrdCd<NoticeBoardVO>(total, currentPage, size,
				NoticeBoardVOList, keyword, searchOption ,brdCd);

		String url = "/notice/list";
		data.setUrl(url);

		model.addAttribute("noticedata", data);
		return "board/notice/list";
	}
	

	// 공지 게시판 검색 기능
		@ResponseBody
		@PostMapping("/list")
		public ArticlePagebrdCd<NoticeBoardVO> listAjax(@RequestBody(required = false) Map<String, Object> map) {
			log.info("map: " + map);

			List<NoticeBoardVO> noticeVOList = this.noticeService.list(map);
			log.info("list -> noticeVOList : " + noticeVOList);

			// 검색한 키워드의 행 수
			int total = this.noticeService.getkeywordTotal(map);

			log.info("listAjax->list -> total : " + total);

			int size = 10;

			String currentPage = map.get("currentPage").toString();

			String keyword = map.get("keyword").toString();
			String searchOption = map.get("searchOption").toString();
			String brdCd = map.get("brdCd").toString();
			
			
			log.info("total : " + total + ", currentPage : " + currentPage + ", size : " + size + ", keyword : " + keyword
					+ ", searchOption : " + searchOption +", brdCd : " + brdCd);

			ArticlePagebrdCd<NoticeBoardVO> data = new ArticlePagebrdCd<NoticeBoardVO>(total,
					Integer.parseInt(currentPage), size, noticeVOList, keyword, searchOption , brdCd);

			log.info("listAjax->data : " + data);

			String url = "/notice/list";

			data.setUrl(url);

			return data;
		}
	
	// 공지 게시판 등록 페이지
	@GetMapping("/list/insertNotice")
	public String insertNotice() {
		return "board/notice/insert";
	}
	
	// 공지 게시판 등록
	@PostMapping("/creatNotice")
	public String createNotice(@Validated NoticeBoardVO noticeVO, BindingResult brResult) {
		log.info("createNotice -> noticeVO :"+noticeVO);
		log.info("createNotice -> noticeVO.getUploadfile().length :"+noticeVO.getUploadfile()[0]);
		
		int result = this.noticeService.createNotice(noticeVO);
		log.info("result -> "+result);
		
		return "redirect:/notice/list";
	}
	
	
		
		
	// 공지 게시판 상세 조회
	@RequestMapping(value ="/list/detail", method=RequestMethod.GET)
	public String detailNoticeBoard(Model model, @RequestParam String noticeBrdNo) {
		
		log.info("noticeBrdNo ---> "+noticeBrdNo);
		
		// 조회수 증가
		int noticeView = this.noticeService.noticeView(noticeBrdNo);
		
		NoticeBoardVO noticeVO = this.noticeService.detail(noticeBrdNo);
		log.info("noticeVO -> "+noticeVO);
		
		model.addAttribute("noticeDetail",noticeVO);
		
		
		// 해당 게시글에 파일이 있다면
				if (noticeVO.getAtchmnflNo() != null) {
					log.info("파일 -> 번호 " + noticeVO.getAtchmnflNo());
					List<AttachedFileVO> list = this.noticeService.noticeAtchList(noticeVO.getAtchmnflNo());
					log.info("파일의 목록 -> " + list);
					model.addAttribute("attachdata", list);
				} else {
					log.info("해당 게시글은 파일이 없습니다.");
				}
		
		
		
		
		return "board/notice/detail";
	}
		
		
		
		
	
	

}
