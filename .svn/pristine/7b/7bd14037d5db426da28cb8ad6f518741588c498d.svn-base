package com.team1.workforest.schedule.controller;

import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.team1.workforest.schedule.service.ScheduleService;
import com.team1.workforest.schedule.vo.ScheduleVO;
import com.team1.workforest.util.ScheduleUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/schedule")
public class ScheduleController {
	
	@Autowired
	ScheduleService scheduleService;
	
	// 일정 불러오기
	@GetMapping
	public JSONArray getScheduleList(
			@RequestParam(value = "chkSchs", required = false) List<String> chkSchs) {
		log.info("chkSchs : " + chkSchs);

		JSONArray jsonArr = new JSONArray();
		
		// 체크박스에 선택한 일정 찾은 후 데이터 가져와서 반환
		if (chkSchs != null) {
	        List<ScheduleVO> scheduleList = new ArrayList<>();

	        if (chkSchs.contains("mySch")) {
	        	String schColor = "yellow";
	        	ScheduleUtil.convertAndgetSchedules(scheduleService.getMySchedules(), schColor, jsonArr);
	        }

	        if (chkSchs.contains("teamSch")) {
	        	String schColor = "green";
	        	ScheduleUtil.convertAndgetSchedules(scheduleService.getTeamSchedules(), schColor, jsonArr);
	        }

	        if (chkSchs.contains("deptSch")) {
	        	String schColor = "blue";
	        	ScheduleUtil.convertAndgetSchedules(scheduleService.getDeptSchedules(), schColor, jsonArr);
	        }

	        if (chkSchs.contains("compSch")) {
	        	String schColor = "red";
	        	ScheduleUtil.convertAndgetSchedules(scheduleService.getCompSchedules(), schColor, jsonArr);
	        }
   
	    }
		
		log.info("jsonArrCheck:{}", jsonArr);
		return jsonArr;
	}
	// 일정 추가하기
	@PostMapping
	public String createSchedule(@RequestBody ScheduleVO scheduleVO) {
		log.info("scheduleVO : {}", scheduleVO);
		
		// 시작일시, 종료일시 포맷 변환
		String ConvertSDate = ScheduleUtil.convertDate(scheduleVO.getSchdulBeginDate());
		String ConvertEDate = ScheduleUtil.convertDate(scheduleVO.getSchdulEndDate());
		scheduleVO.setSchdulBeginDate(ConvertSDate);
		scheduleVO.setSchdulEndDate(ConvertEDate);
		
		int result = scheduleService.createSchedule(scheduleVO);
		
		if(result != 0) {
			return "success";
		}
		
		return "fail";
	}
	
	// 일정 수정하기
	@PutMapping
	public int updateSchedule(ScheduleVO scheduleVO) {
		int result = scheduleService.updateSchedule(scheduleVO);
		
		return result;
	}
	
	// 일정 삭제하기
	@DeleteMapping
	public int deleteSchedule() {
		int result = scheduleService.deleteSchedule();
		
		return result;
	}
}
