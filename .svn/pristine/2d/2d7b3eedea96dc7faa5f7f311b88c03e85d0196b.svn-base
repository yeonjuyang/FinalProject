package com.team1.workforest.board.suggestion.service.impl;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.team1.workforest.board.suggestion.mapper.SuggestionMapper;
import com.team1.workforest.board.suggestion.service.SuggestionService;
import com.team1.workforest.board.suggestion.vo.SuggestionReplyVO;
import com.team1.workforest.board.suggestion.vo.SuggestionVO;
import com.team1.workforest.vo.AttachedFileVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SuggestionServiceImpl implements SuggestionService {

	@Autowired
	String uploadFolder;

	@Autowired
	SuggestionMapper suggestMapper;

	// 전체의 행수
	@Override
	public int getTotal() {
		return this.suggestMapper.getTotal();
	}

	// 건의 게시판 목록
	@Override
	public List<SuggestionVO> list(Map<String, Object> map) {
		return this.suggestMapper.list(map);
	}

	// 조회수증가
	@Override
	public int suggestionView(String sugestBrdNo) {
		return this.suggestMapper.suggestionView(sugestBrdNo);
	}

	// 건의 게시판 상세 조회
	@Override
	public SuggestionVO detail(String sugestBrdNo) {
		return this.suggestMapper.detail(sugestBrdNo);
	}

	// 댓글 조회
	@Override
	public List<SuggestionReplyVO> suggestReplylist(SuggestionReplyVO vo) {
		return this.suggestMapper.suggestReplylist(vo);
	}

	// 댓글 등록
	@Override
	public int SuggestionReplyInsert(SuggestionReplyVO vo) {
		return this.suggestMapper.SuggestionReplyInsert(vo);
	}

	// insert한 날짜 가져오기
	@Override
	public SuggestionReplyVO insertdate(SuggestionReplyVO vo) {
		return this.suggestMapper.insertdate(vo);
	}

	// 건의 게시판 삭제
	@Override
	public int deleteSuggestion(SuggestionVO vo) {
		return this.suggestMapper.deleteSuggestion(vo);
	}

	// 건의 게시판 댓글 입력 후 입력한 값 보여주기
	@Override
	public SuggestionReplyVO insertSuggestionReplyVO(SuggestionReplyVO vo) {
		return this.suggestMapper.insertSuggestionReplyVO(vo);
	}

	// 댓글 삭제
	@Override
	public int deleteSuggestionReplyVO(SuggestionReplyVO vo) {
		return this.suggestMapper.deleteSuggestionReplyVO(vo);
	}

	@Transactional
	@Override
	public int createSuggest(SuggestionVO suggestionVO) {
	    int result = 0;
	    int flag = 0;
	    String attachmnflNo = "";
	    File uploadPath = new File(uploadFolder, getFolder());

	    // 연월일 폴더 생성
	    if (!uploadPath.exists()) {
	        uploadPath.mkdirs();
	    }
	    
	    MultipartFile uploadFile = suggestionVO.getUploadfile();
	    if (uploadFile != null && !uploadFile.isEmpty()) {
	        // 원본 파일명이 있을 때만 파일 입력 처리
	        String orginalFileName = uploadFile.getOriginalFilename();
	        log.info("원본 파일명 : " + orginalFileName);
	        log.info("파일 크기    : " + uploadFile.getSize());
	        log.info("MIME타입  : " + uploadFile.getContentType());
	        
	        String uploadFileName = "";
	        long size = uploadFile.getSize(); // 파일 크기
	        String mime = uploadFile.getContentType(); // mime타입
	        String ext = orginalFileName.substring(orginalFileName.lastIndexOf("."));
	        UUID uuid = UUID.randomUUID();
	        uploadFileName = uuid.toString() + "_" + ext;
	        log.info("uploadFileName : " + uploadFileName);
	        
	        File saveFile = new File(uploadFolder + File.separator + getFolder(), uploadFileName);
	        
	        try {
	            // 파일 복사 실행
	            uploadFile.transferTo(saveFile);

	            AttachedFileVO attachFileVO = new AttachedFileVO();
	            attachFileVO.setAtchmnflSize(size);
	            attachFileVO.setAtchmnflNm(uploadFileName);
	            attachFileVO.setAtchmnflOriginNm(orginalFileName);
	            attachFileVO.setAtchmnflUrl("/" + getFolder().replace("\\", "/") + "/" + uploadFileName);
	            
	            log.info("attachFileVO : " + attachFileVO);
	            
	            // 파일 정보 데이터베이스에 저장
	            result = this.suggestMapper.insertAttachedFile(attachFileVO);
	            log.info("file result -> " + result);
	            
	            attachmnflNo = this.suggestMapper.attachmnflNo();

	            suggestionVO.setAtchmnflNo(attachmnflNo);
	            flag = 1;
	        } catch (IllegalStateException | IOException e) {
	            log.error(e.getMessage());
	        }
	    }

	    // 파일이 있을 경우에만 파일 정보를 설정한 후 suggestMapper.createSuggest 호출
	    if (flag == 1) {
	        return this.suggestMapper.createSuggest(suggestionVO);
	    } else {
	        return 0; // 파일이 없는 경우 0 반환 또는 다른 처리 방식으로 변경
	    }
	}

	// 연/월/일 폴더 생성
	public String getFolder() {
		// 2024-01-30 형식(format) 지정
		// 간단한 날짜 형식
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		// 날짜 객체 생성(java.util 패키지)
		Date date = new Date();
		// 2024-01-30
		String str = sdf.format(date);
		// 2024-01-30 -> 2024\\01\\30
		return str.replace("-", File.separator);
	}

	// 이미지인지 판단. 썸네일은 이미지만 가능하므로..
	public boolean checkImageType(File file) {
		// MIME(Multipurpose Internet Mail Extensions) : 문서, 파일 또는 바이트 집합의 성격과 형식. 표준화
		// MIME 타입 알아냄. .jpeg / .jpg의 MIME(ContentType)타입 : image/jpeg
		String contentType;
		try {
			contentType = Files.probeContentType(file.toPath());
			log.info("contentType : " + contentType);
			// image/jpeg는 image로 시작함->true
			return contentType.startsWith("image");
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 이 파일이 이미지가 아닐 경우
		return false;
	}

}
